The goal is to implement a ‘text-analyzer’. It must be a shell application so one can run it once and perform one task by another.
 
Step-by-step
1.Implement simple shell app so one can run it once and give it some arguments.
The signature of input parameters:

1. -i (--input) - path to the input file (e.g. C:\Program Files\Java\input.txt). Type: String, Required: true
2. -t (--task) – task to execute. Type: Enum, Required: true, Permitted values: frequency, length, duplicates
3. -- help –a detailed information of how to use your app

Note! As you may have noticed, the parameters have several names.  

I suggest you using JCommander to parse input arguments, though it is not ‘a must’ and you may choose any tool you want.
 
2. Your app should take file and other input parameters and be able to do several tasks on it.

Tasks:

1.Find the most two frequent words and print them out sorted alphabetically in a reversed order. (Task name: frequency).

good -> 23
allow -> 2

2. Find first three longest words and print this words along with the their length sorted them in a descend order by the total number of letters each word contains (task name: length)

battle -> 6
map -> 3
a – 1
 
3. Find first three words which have duplicates and print them inversely (e.g. map -> pam) in the upper case sorted by length in ascending order. (task name: duplicates)
PAM
WOLLA
STNEMUGRA
 
Note! Each output should contain ‘elapsed time’ information in milliseconds. like:
battle -> 6
map -> 3
a – 1
elapsed time: 400 millis
 
Expected:
1. Good working app covered with Junit tests
2. analytics.txt file with the results of all 3 tasks done over input.txt file (from attachments), time comparisons of a parallel work and a non-parallel work.
3. Do not forget to add input.txt file to your repo as well.